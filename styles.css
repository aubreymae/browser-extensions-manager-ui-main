/* CSS Styling - Logical Grouping */
/*
** 1. Layout / Positioning
** (display, position, top/right/bottom/left, z-index, float, clear)
** (grid-template-columns, grid-column, grid-area, flex, align-items)
**
** 2. Box Model
** (width, height, padding, margin, box-sizing, overflow)
**
** 3. Typography
** (font-family, font-size, font-weight, line-height, letter-spacing, text-align, white-space)
**
** 4. Visual Styles
** (color, background, border, box-shadow, opacity)
**
** 5. Miscellaneous
** (transition, animation, cursor, pointer-events, transform)
**
*/

/* Define your color palettes */
:root {
  /* Light Theme Palette */
  --base-light: linear-gradient(180deg, #ebf2fc 0%, #eef8f9 100%);
  --text-light: hsl(227, 75%, 14%);
  --ext-inner-text-light: hsl(226, 11%, 37%);
  --button-border-light: hsl(217, 61%, 90%);
  --button-background-color-light: hsl(0, 0%, 93%);

  /* Dark Theme Palette */
  --base-dark: linear-gradient(180deg, #040918 0%, #091540 100%);
  --text-dark: hsl(200, 60%, 99%);
  --ext-inner-text-dark: hsl(0, 0%, 78%);
  --button-border-dark: hsl(225, 23%, 24%);
  --button-background-color-dark: hsl(226, 25%, 17%);

  /* Default to light theme (or check prefers-color-scheme here) */
  --base: var(--base-light);
  --text: var(--text-light);
  --ext-inner-text: var(--ext-inner-text-light);
  --button-border: var(--button-border-light);
  --button-background-color: var(--button-background-color-light);
}

/* Apply dark theme if system prefers it AND no manual override by JS */
@media (prefers-color-scheme: dark) {
  :root:not(.light-mode) {
    /* Check that body doesn't have .light-mode */
    --base: var(--base-dark);
    --text: var(--text-dark);
    --ext-inner-text: var(--ext-inner-text-dark);
    --button-border: var(--button-border-dark);
    --button-background-color: var(--button-background-color-dark);
  }
}

/* Override with .dark-mode class from JS */
body.dark-mode {
  --base: var(--base-dark);
  --text: var(--text-dark);
  --ext-inner-text: var(--ext-inner-text-dark);
  --button-border: var(--button-border-dark);
  --button-background-color: var(--button-background-color-dark);
}

/* Override with .light-mode class from JS (if you use it) */
body.light-mode {
  --base: var(--base-light);
  --text: var(--text-light);
  --ext-inner-text: var(--ext-inner-text-light);
  --button-border: var(--button-border-light);
  --button-background-color: var(--button-background-color-light);
}

/* Ensure html reflects the color-scheme for browser UI */
html {
  color-scheme: light; /* Default, JS will change it */
  font-family: "Noto Sans", sans-serif;
}
html.dark-mode-active {
  /* Example if JS puts a class on HTML */
  color-scheme: dark;
}
html.light-mode-active {
  color-scheme: light;
}

body {
  background: var(--base);
  min-height: 100vh;
  margin-right: 10rem;
  margin-left: 10rem;
  color: var(--text);
}

h1,
h2,
h3,
h4 {
  padding: 0;
  margin: 0;
  color: var(--text);
}

button {
  padding: 0.5rem;
  background: none;
  border: none;
  cursor: pointer;

  padding-right: 1rem;
  padding-left: 1rem;
  border: 1px solid var(--button-border);
  border-radius: 1rem;
  background-color: var(--button-background-color);
  color: var(--ext-inner-text);
}

.filter-btn {
  background-color: white;
}

/* Header */
header {
  display: flex;
  flex-direction: row;
  padding: 1rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
  border-radius: 1rem;
  background-color: hsl(226, 25%, 17%);
  font-weight: bold;
  color: var(--text);
}

/* Menu */
.menu {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  margin: 0;
}

.menu button:focus {
  border: 1px solid hsl(225, 23%, 24%);
  background-color: hsl(3, 71%, 56%);
  color: hsl(227, 75%, 14%);
}

.filters {
  margin-left: auto;
}

.filters input[type="checkbox"] {
  display: none;
  visibility: hidden;
}

.filters label {
  display: inline-block;
  padding: 2px 20px 2px 20px;
  background-color: hsl(226, 25%, 17%);
  border-radius: 20px;
  text-align: center;
  line-height: 30px;
  cursor: pointer;
}

.filters input[type="checkbox"]:checked + label {
  background-color: hsl(3, 71%, 56%);
  color: white;
}

.btn-dark-light-mode {
  margin-left: auto;
}

/* Attribution */
.attribution {
  margin: 2rem;
  font-size: 11px;
  text-align: center;
}
.attribution a {
  color: hsl(228, 45%, 44%);
}

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  margin-top: 2rem;
}

.extension-card {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 1rem;
  border: 1px solid hsl(225, 23%, 24%);
  border-radius: 20px;
  background-color: hsl(226, 25%, 17%);
}

.card-header {
  display: flex;
  flex-direction: row;
  gap: 1rem;
}

.card-footer {
  display: flex;
  justify-content: space-between;
}

.icon {
  width: 50px;
  height: 50px;
}

.extension-description {
  color: var(--ext-inner-text);
}

/* Toggle */
.switch {
  position: relative;
  display: inline-block;
  width: 48px;
  height: 28px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: hsl(226, 11%, 37%);
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 20px;
  width: 20px;
  left: 4px;
  top: 4px;
  /* transform: translateY(1); */
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked + .slider {
  background-color: hsl(3, 71%, 56%);
}

input:focus + .slider {
  box-shadow: 0 0 1px hsl(3, 71%, 56%);
}

input:checked + .slider:before {
  -webkit-transform: translateX(20px);
  -ms-transform: translateX(20px);
  transform: translate(20px, -1px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

/* Mobile View */
@media only screen and (max-width: 1200px) {
  body {
    margin-right: 1rem;
    margin-left: 1rem;
  }

  .menu {
    flex-direction: column;
    align-items: center;
  }

  .filters {
    margin: auto;
  }

  .container {
    flex-direction: column;
    grid-template-columns: repeat(1, 1fr);
  }
}
